import java.util.Random;

public enum ObiettivoComune {
	//l'identificazione delle carte obiettivo avviene tramite semplice numerazione
	Obiettivo1,
	Obiettivo2,
	Obiettivo3,
	Obiettivo4,
	Obiettivo5,
	Obiettivo6,
	Obiettivo7,
	Obiettivo8,
	Obiettivo9,
	Obiettivo10,
	Obiettivo11,
	Obiettivo12
	
}

/* al momento dell'estrazione casuale delle due tessere obiettivo comune si salva in due variabili quale obiettivo va perseguito
	(il codice sottostante deve essere inserito nella classe di scorrimento del gioco)
	
	public final enum PrimoObiettivo;
	public final enum SecondoObiettivo; 
	
	Random random = new Random();
	
	genero due numeri casuali tra 1 e 12 finchï¿½ non sono diversi
	do{
		int n1 = random.nextInt(12)+1;
		int n2 = random.nextInt(12)+1;
	} while(n1=n2)
	
	associo ad ogni obiettivo in campo un obiettivo esistente
	PrimoObiettivo = Associa(n1);
	SecondoObiettivo = Associa(n2);
	
	metodo per associare ad ogni numero casuale il corrispondente obiettivo
	public enum Associa(int n){
		switch (n) {
			case 1:
				return ObiettivoComune.Obiettivo1;
				break;
			case 2:
				return ObiettivoComune.Obiettivo2;
				break;
			case 3:
				return ObiettivoComune.Obiettivo3;
				break;
			case 4:
				return ObiettivoComune.Obiettivo4;
				break;
			case 5:
				return ObiettivoComune.Obiettivo5;
				break;
			case 6:
				return ObiettivoComune.Obiettivo6;
				break;
			case 7:
				return ObiettivoComune.Obiettivo7;
				break;
			case 8:
				return ObiettivoComune.Obiettivo8;
				break;
			case 9:
				return ObiettivoComune.Obiettivo9;
				break;
			case 10:
				return ObiettivoComune.Obiettivo10;
				break;
			case 11:
				return ObiettivoComune.Obiettivo11;
				break;
			case 12:
				return ObiettivoComune.Obiettivo12;
				break;
			}
	}
 
 
*/

public abstract class TesseraObiettivoComune{
	
	public boolean ControlloObiettivoRaggiunto(enum obiettivo, TesseraOggetto[][] libreria){ //passo obiettivo da controllare e libreria da controllare
		
		switch (obiettivo) {
		
		case Obiettivo1:
			//6 gruppi (separati) di due tessere adiacenti dello stesso tipo (gruppi anche tipi diversi)
			
			return true;
			
		case Obiettivo2:
			//4 tessere dello stesso tipo ai 4 angoli della libreria
			if(libreria[0][0].getColore() == libreria[5][0].getColore() && libreria[0][0].getColore() == libreria[5][4].getColore() && libreria[0][0].getColore() == libreria[0][4].getColore()) {
				return true;
			}else{
			return true;
			}
			
		case Obiettivo3:
			//4 gruppi (separati) di 4 tessere adiacenti dello stesso tipo (gruppi anche tipi diversi)
			
			/* int contatore=0;
						
			confronta la tessera con le 4 tessere adiacenti in verticale
			while(contatore<=4) { //resta nel ciclo finchè il contatore non trova almeno 4 gruppi (AGGIUNGERE USCITA SE NON CI SONO GRUPPI)
				for(int j=0; j<5; j++) {  //scorro le colonne
					for(int i=0; i<3; i++) { //scorro le righe
						if(libreria[i][j].getColore() == libreria[i+1][j].getColore() == libreria[i+2][j].getColore() == libreria [i+3][j].getColore()) {
							contatore++;
							i=i+2; //se trovo un gruppo, aumento i di 2, cosi almeno non entro più nel ciclo for
							j++; // scorro la colonna di uno
						}
					}
				}
			} */
			
			
		case Obiettivo4:
			//2 quadrati (separati) di 4 tessere dello stesso tipo anche i quadrati dello stesso tipo
			
			//MANCA CONTROLLO SU STESSO COLORE TRA DUE GRUPPI
			
			int cont = 0; // contatore per tenere traccia di quanti gruppi ci sono
			int exit = 0; //var per uscire dal ciclo while in caso non ci siano gruppi e si abbia controllato tutta la griglia
			
			do {
				for(int r=0, r<=5, r++) {
					for(int c=0, c<=4, c++) {
						if(libreria[r][c].getColore() == libreria[r][c+1].getColore() && libreria[r][c].getColore() == libreria[r+1][c].getColore() && libreria[r][c].getColore() == libreria[r+1][c+1].getColore()) {
							cont++;
							c+=2; //se trovo un gruppo la prossima colonna da controllare è a +2 dal riferimento 
						}
					}
					if(cont!=0) {
						r+2; //se trovo un gruppo la prossima riga da controllare è a +2 dal riferimento
					}
				}
				var = r;
			}while(cont<2 || var<=5) 
			
			
			if(cont=2){
				return true;
			}else{
				return false;
				}
			
						
		case Obiettivo5:
			//3 colonne di 6 tessere di max 3 tipi diversi (colonne possono avere combinazioni di tipi diverse)
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			return true;
			
		case Obiettivo6:
			//8 tessere dello stesso tipo
			int contatore = 0;		
			
			//fisso (e scorro) la cella da confrontare con tutte le altre
			for(int fissaR=0; fissaR<=5; fissaR++) {
				for( int fixC=0; fixC>=4; fixC++) {
					
					//scorro l'intera matrice: 
					for(int r=0; r<=5; r++) {
						for(int c=0; c<=4; c++) {
							if(libreria[fissaR][fixC].getColore()==libreria[r][c].getColore()){
								contatore++;
								if(contatore-1 == 8) { //contatore viene sottratto di 1 perchè fa un controllo su se stesso il ciclo che darà sempre risultato positivo e falsa il conteggio
									return true;
								}
							}
						}
					}
				}
			}		
			
			return false;
			
		case Obiettivo7:
			//5 tessere dello stesso tipo che fomrano una diagonale; 
			boolean d1 = true;
			boolean d2 = true;
			boolean d3 = true;
			boolean d4 = true;
			
			//check prima diagonale possibile
			for( int r=0; r<=3; r++) {
				for( int i=r+1; i<=4; i++) {
					if(libreria[r][r].getColore()!=libreria[r][i].getColore()) {
						d1 = false;
						break;
					}
				}
				if(d1==false) {
					break;
				}
			}
			
			//check seconda diagonale possibile
			for(r=1; r<=5; r++) {
				for( int i=r+1; i<=5; i++) {
					if(libreria[r][r-1].getColore()!=libreria[r][i].getColore()) {
						d2 = false;
						break;
					}
				}
				if(d2==false) {
					break;
				}
			}
			
			//check terza diagonale possibile
			for(r=0; r<=3; r++) {
				for(int i=r+1; i<=4; i++) {
					if(libreria[r][4-r].getColore()!=libreria[r][i].getColore()) {
						d3 = false;
						break;
					}
				}
				if(d3==false) {
					break;
				}
			}
			
			//check quarta diagonale possibile
			for(r=1; r<=4; r++) {
				for(int i=r+1; i<=5; i++) {
					if(libreria[r][5-r].getColore()!=libreria[r][i].getColore()) {
						d4 = false;
						break;
					}
				}
				if(d4==false) {
					break;
				}
			}
			
			
			if(d1==true || d2==true || d3==true || d4==true) {
				return true;
			}else {
				return false;
				}
			
		case Obiettivo8:
			//4 righe di 5 tessere di max 3 tipi diversi (righe possono avere combinazioni di tipi diverse)
			
			return true;
			
		case Obiettivo9:
			//2 colonne ciascuna di 6 tipi diversi
			int conto = 0; 
			int fixR = 0;
			int c = 0;
			boolean div = true; //partiamo dal presupposto che in una colonna tutte le celle siano diverse
			
			do {
				for(fixR=0; fixR<=4; fixR++) { //fisso (e scorro) la cella della colonna da controllare
					for(r=fixR+1; r<=5; r++) { //scorro le celle successive 
						if(libreria[fixR][c].getColore()==libreria[r][c].getColore()) { //se trovo due celle uguali interrompo il ciclo di controllo
							div=false; 
							break;
						}
					}
					if(div==true) { //se ï¿½ vero che sono diverse
						conto++;
					}
				}
				div=true; //riporto il presupposto iniziale
				c++; //passo al controllo di un'altra colonna
				
			}while{conto<2 || c<=4} //il ciclo si interrompe quando trovo le due colonne o quando ho controllato tutte le colonne
			
			if(conto==2) {
				return true;
			}else {
				return false;
			}
			
		case Obiettivo10:
			//2 righe ciascuna di 5 tipi diversi
			int cont = 0; 
			int fixC = 0;
			int r = 0;
			boolean div = true; //partiamo dal presupposto che in una riga tutte le celle siano diverse
			
			do {
				for(fixC=0; fixC<=3; fixC++) { //fisso (e scorro) la cella della riga da controllare
					for(c=fixC+1; c<=4; c++) { //scorro le celle successive 
						if(libreria[r][fixC].getColore()==libreria[r][c].getColore()) { //se trovo due celle uguali interrompo il ciclo di controllo
							div=false; 
							break;
						}
					}
					if(div==true) { //se ï¿½ vero che sono diverse
						cont++;
					}
				}
				div=true; //riporto il presupposto iniziale
				r++; //passo al controllo di un'altra riga
				
			}while{cont<2 || r<=5} //il ciclo si interrompe quando trovo le due righe o quando ho controllato tutte le righe
			
			if(cont==2) {
				return true;
			}else {
				return false;
			}
			return true;
			
		case Obiettivo11:
			//5 tessere dello stesso tipo messe a X
			
			for(int c=0; c<=4; c++) {
				for(int r=0; r<=5, r++) {
					if (libreria[r][c].getColore() == libreria[r][c+2].getColore() && libreria[r][c].getColore() == libreria[r+1][c+1].getColore() && libreria[r][c].getColore() == libreria[r+2][c+2].getColore() && libreria[r][c].getColore() == libreria[r+2][c].getColore()) {
						return true;
					}
				}
			}
			
			return false;
			
		case Obiettivo12:
			//5 colonne di altezza crescente/decrescente con tessere di qualsiasi tipo
			
			boolean dec = false;
			boolean cre = false;
			
			//controllo decrescente sx -> dx
			for(int c=0; c<=4; c++) {
				for(int r=c+1; r<=5, r++) {
					if (libreria[r][c]!=null) {
						dec = true;
					}else {
						 dec = false;
					}
				}
			}
			
			//controllo crescente sx -> dx
			for(int c=0; c<=4; c++) {
				for(int r=5; r>=5-c; r--) {
					if (libreria[r][c]!=null) {
						cre = true;
					}else {
						 cre = false;
					}
				}
			}
			
			if(dec=true || cre=true) {
				return true;
			}else {
				return false;
			}
			
		return false;
	}
